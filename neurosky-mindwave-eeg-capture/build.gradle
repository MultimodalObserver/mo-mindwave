apply plugin: 'java'

sourceCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//mainClassName = 'core.App'
version = '0.0.0'

repositories {
    mavenCentral()
    
    //allow local dependencies (dockframes)
    flatDir {
        dirs 'libs'
        dirs '../libs'
    }
}

dependencies {
    
    compile project(':mo')
    
    compile project(':neurosky-mindwave-eeg-data')

    testCompile group: 'junit', name: 'junit', version: '4.10'

    compile name: "docking-frames-core"
    compile name: "docking-frames-common"
    compile name: 'i18n-1.1.2-SNAPSHOT' 
    compile 'com.theeyetribe:eyetribe-java:0.9.60'
    /*
    // http://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    //compile fileTree(dir: 'libs', include: '*.jar')
    //compile 'org.dockingframes:docking-frames-common:1.1.1'
    compile name: "docking-frames-core"
    compile name: "docking-frames-common"
    
    // http://mvnrepository.com/artifact/org.apache.commons/commons-configuration2
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.0'

    // http://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.2'
    
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    
    
       
    //Jackson: json lib
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'*/
}

jar {
    manifest {
        attributes( 'Implementation-Title'   : 'Gradle',
                    'Implementation-Version' :  version,
        )
    }
    
/*    from (configurations.compile.collect 
        { it.isDirectory() ? it : zipTree(it) }){
        // remove all signature files
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }*/
    
    doLast{
        project.file('build/libs/plugins').mkdirs()
        copy{
            from 'src/main/resources'
            into 'build/libs'
        }
    }
}
